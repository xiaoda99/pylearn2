!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.cloudflow.CLOUDFLOW {
                 which_set: 'train',
                 num_examples: 600000,
                 threshold: 2,
                 pool_xy: 1,
                 pool_t: 1,
                 train_frame_size: [3,37,37],
                 cropped_size: [3, 21, 21],
                 predict_frame_size: [2,1,1],
                 predict_interval: 2,
                 examples_per_image: 100,
                 adaptive_sampling: 0,
                 sample_prob: .6,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 512,
        layers: [ !obj:pylearn2.models.mlp.RectifiedLinear {
                    layer_name: 'h0',
                    dim: 200,
                    irange: .0002,
                    max_col_norm: 9.,
                },!obj:pylearn2.models.mlp.RectifiedLinear {
                    layer_name: 'h1',
                    dim: 50,
                    irange: .0002,
                    max_col_norm: 9.,
                }, !obj:pylearn2.models.mlp.Sigmoid {
                    layer_name: 'y',
                    irange: .005,
                    dim: 1,
                    max_col_norm: 100.,
                    monitor_style: 'classification',
                 }
                ],
        nvis: 1323,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 512,
        learning_rate: .01,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .9
        },
        train_iteration_mode: 'even_shuffled_sequential',
        monitor_iteration_mode: 'even_sequential',
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : &valid !obj:pylearn2.datasets.cloudflow.CLOUDFLOW {
                 which_set: 'valid',
                 num_examples: 250000,
                 threshold: 2,
                 pool_xy: 1,
                 pool_t: 1,
                 train_frame_size: [3,37,37],
                 cropped_size: [3, 21, 21],
                 predict_frame_size: [2,1,1],
                 predict_interval: 2,
                 examples_per_image: 100,
                 adaptive_sampling: 0,
                 sample_prob: .6,
                 },
                'test' : &test !obj:pylearn2.datasets.cloudflow.CLOUDFLOW {
                 which_set: 'test',
                 num_examples: 350000,
                 threshold: 2,
                 pool_xy: 1,
                 pool_t: 1,
                 train_frame_size: [3,37,37],
                 cropped_size: [3, 21, 21],
                 predict_frame_size: [2,1,1],
                 predict_interval: 2,
                 examples_per_image: 100,
                 adaptive_sampling: 0,
                 sample_prob: 1.,
                 },
            },
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [
            !obj:pylearn2.costs.mlp.Default {
            }, !obj:pylearn2.costs.mlp.WeightDecay {
                coeffs: [.0002, .0002, .0002,]
            }          
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_y_misclass",
                    prop_decrease: 0.,
                    N: 10
                },
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: 100
                }
            ]
        }
},
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: "valid_y_misclass",
             save_path: "multiscale2h_ts[3,37,37]_pxy1_pt1_cs[3, 21, 21]_ps2_pi2_nv1323_h0d200_h1d50_best.pkl"
        },!obj:pylearn2.training_algorithms.sgd.OneOverEpoch {
             start: 5,
             half_life: 50,
             min_lr: 0.00001
        },
    ],
    save_path: "multiscale2h_ts[3,37,37]_pxy1_pt1_cs[3, 21, 21]_ps2_pi2_nv1323_h0d200_h1d50.pkl",
    save_freq: 1
}

