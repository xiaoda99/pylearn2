!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.cloudflow.CLOUDFLOW {
                 which_set: 'train',
                 num_examples: 700000,
                 threshold: 2,
                 prediv: 2,
                 tdiv: 2,
                 train_frame_size: [3,25,25],
                 predict_frame_size: [2,1,1],
                 predict_interval: 2,
                 examples_per_image: 100,
                 adaptive_sampling: 0,
                 sample_prob: .6,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 512,
        layers: [ !obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'h0',
                     pad: %(h0pad)i,
                     tied_b: 1,
                     num_channels: 32,
                     num_pieces: 2,
                     kernel_shape: [%(h0ks)i, %(h0ks)i],
                     pool_shape: [2, 2],
                     pool_stride: [2, 2],
                     irange: .0002,
                     max_kernel_norm: 99.9,
                 },!obj:pylearn2.models.maxout.MaxoutConvC01B {
                     layer_name: 'h1',
                     pad: 1,
                     tied_b: 1,
                     num_channels: 64,
                     num_pieces: 2,
                     kernel_shape: [3, 3],
                     pool_shape: [%(h1ps)i, %(h1ps)i],
                     pool_stride: [%(h1ps)i, %(h1ps)i],
                     irange: .0002,
                     max_kernel_norm: 99.9,
                 },!obj:pylearn2.models.mlp.Sigmoid {
                    layer_name: 'y',
                    irange: .0002,
                    dim: 1,
                    max_col_norm: %(ymcn)f,
                    monitor_style: 'classification',
                 }
                ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [12, 12],
            num_channels: 3,
            axes: ['c', 0, 1, 'b']
        },
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 512,
        learning_rate: %(lr)f,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .9
        },
        train_iteration_mode: 'even_shuffled_sequential',
        monitor_iteration_mode: 'even_sequential',
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : &valid !obj:pylearn2.datasets.cloudflow.CLOUDFLOW {
                 which_set: 'valid',
                 num_examples: 250000,
                 threshold: 2,
                 prediv: 2,
                 tdiv: 2,
                 train_frame_size: [3,25,25],
                 predict_frame_size: [2,1,1],
                 predict_interval: 2,
                 examples_per_image: 100,
                 adaptive_sampling: 0,
                 sample_prob: .6,
                 },
                'test' : &test !obj:pylearn2.datasets.cloudflow.CLOUDFLOW {
                 which_set: 'test',
                 num_examples: 350000,
                 threshold: 2,
                 prediv: 2,
                 tdiv: 2,
                 train_frame_size: [3,25,25],
                 predict_frame_size: [2,1,1],
                 predict_interval: 2,
                 examples_per_image: 100,
                 adaptive_sampling: 0,
                 sample_prob: 1.,
                 },
            },
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [
            !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'h0' : 1., 'h1' : 1., 'y' : %(yiip)f},
            input_scales: { 'h0' : 1., 'h1' : 1., 'y' : %(yis)f }
            },!obj:pylearn2.costs.mlp.WeightDecay {
                coeffs: [%(wd)f, %(wd)f, %(wd)f ]
            }          
            ]
        },
        
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_y_misclass",
                    prop_decrease: 0.,
                    N: 10
                },
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: 100
                }
            ]
        }
},
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: "valid_y_misclass",
             save_path: "%(save_base)s_best.pkl"
        },!obj:pylearn2.training_algorithms.sgd.OneOverEpoch {
             start: 5,
             half_life: 50,
             min_lr: 0.00001
        },
    ],
    save_path: "%(save_base)s.pkl",
    save_freq: 1
}

